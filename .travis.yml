language: c
sudo: false
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
      #- g++
      #- gfortran
      #- valgrind
      #- csh
      #- g++-multilib
      #- gcc-multilib
branches:
  except:
    - /^(?i:notest)-.*$/

matrix:
  include:
    - env: python=3.6 CONDA_PY=36 TESTSYSTEMS="ValenceSmallMoleculeLibraryTestSystem" OPENMM="latest"
    - env: python=3.7 CONDA_PY=37 TESTSYSTEMS="ValenceSmallMoleculeLibraryTestSystem" OPENMM="latest"
    - env: python=3.7 CONDA_PY=37 TESTSYSTEMS="ValenceSmallMoleculeLibraryTestSystem" OPENMM="beta"
    - env: python=3.7 CONDA_PY=37 TESTSYSTEMS="ValenceSmallMoleculeLibraryTestSystem" OPENMM="nightly"
  allow_failures:
    - env: python=3.7 CONDA_PY=37 TESTSYSTEMS="ValenceSmallMoleculeLibraryTestSystem" OPENMM="beta"
    - env: python=3.7 CONDA_PY=37 TESTSYSTEMS="ValenceSmallMoleculeLibraryTestSystem" OPENMM="nightly"

install:
  #add random sleep from 1-10s to try to prevent overloading the anaconda servers
  - sleep $[ ( $RANDOM % 10 )  + 1 ]s
  - env
  - source devtools/travis-ci/install.sh
  - export PYTHONUNBUFFERED=true
  - export CC=gcc
  - export CXX=g++
  # Unpack encrypted OpenEye license file
  - if [ "$TRAVIS_SECURE_ENV_VARS" == true ]; then openssl aes-256-cbc -K $encrypted_e49582a90fb5_key -iv $encrypted_e49582a90fb5_iv -in devtools/travis-ci/oe_license.txt.enc -out $OE_LICENSE -d; fi
  - if [ "$TRAVIS_SECURE_ENV_VARS" == false ]; then echo "OpenEye license will not be installed in forks."; fi

script:
  # Create a test environment
  - conda create --yes -n test python=$python
  # Activate the test environment
  - source activate test
  # Add omnia
  - conda config --add channels omnia --add channels conda-forge
  # Add OpenEye channel
  - conda config --add channels openeye
  # Update conda
  - conda update --yes --all
  # List conda environment
  - conda list
  # Build the recipe
  - conda build devtools/conda-recipe
  # Install the package
  - conda install --yes --use-local ${PACKAGENAME}-dev
  # Install testing dependencies
  - conda install --yes --quiet nose nose-timer
  # Install desired OpenMM version
  - if [ "$OPENMM" == "latest" ]; then echo "Using latest release OpenMM."; conda remove --yes --force openmm; conda clean -tipsy; conda install --yes -c omnia openmm; fi
  - if [ "$OPENMM" == "beta" ]; then echo "Using OpenMM beta"; conda remove --yes --force openmm; conda clean -tipsy; conda install --yes --override-channels -c omnia/label/beta openmm; fi
  - if [ "$OPENMM" == "nightly" ]; then echo "Using OpenMM nightly dev build."; conda remove --yes --force openmm; conda clean -tipsy; conda install --yes --override-channels -c omnia-dev openmm; fi
  # Test the package
  - cd devtools && nosetests perses --nocapture --with-coverage --verbosity=3 --with-timer -a '!advanced' && cd ..

env:
  global:
    - ORGNAME="omnia"
    - OE_LICENSE="$HOME/oe_license.txt"
    - PACKAGENAME="perses"
    # Location of decrypted OpenEye license file
    - OE_LICENSE="$HOME/oe_license.txt"
    - OPENEYE_CHANNEL="-i https://pypi.anaconda.org/OpenEye/simple"
    # encrypted BINSTAR_TOKEN for push of dev package to binstar
    - secure: "RRvLDPu9mPoNaRWIseaJdgShOXI+PaHPWKAIJvW7VYWcAS6iEN7W4Fj4zD5hkocQxc3ou97EtkgID+ApH10bSGKxCykyU0urSY9jsSOJX2m0AE19X0dVr6ySIQkwCWE6kUMVlvQYQo80fM2EMElD+btr4G9XBAhArAO7HvZHkoQ="

after_success:
  - echo "after_success"
  - if [ "$TRAVIS_SECURE_ENV_VARS" == true ]; then source devtools/travis-ci/after_success.sh; fi
